/** * This file was generated by the JPA Modeler */
package fr.trendev.comptandye.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import fr.trendev.comptandye.utils.UserAccountType;
import fr.trendev.comptandye.utils.visitors.Visitor;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * An UserAccount can be an Administrator, a Professional or an Individual. This
 * class is linked to the jdbc-realm authentication.
 *
 * @author jsie
 */
@Entity
@Table(name = "USER_ACCOUNT")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "cltype",
        visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = Administrator.class,
            name = UserAccountType.ADMINISTRATOR)
    ,   @JsonSubTypes.Type(value = Individual.class,
            name = UserAccountType.INDIVIDUAL)
    ,  @JsonSubTypes.Type(value = Professional.class,
            name = UserAccountType.PROFESSIONAL)})
public abstract class UserAccount {

    /**
     * The User id. Should be unique.
     */
    @Id
    private String email;

    @Basic
    private String cltype;

    /**
     * Password is never provided in clear.
     */
    @Basic
    private String password;

    @Basic
    private String username;

    /**
     * Autogenerated UUID, begins with PRO- for Professional users, IND- for
     * Individual users and ADMIN- for Administrators (generated in the restapi
     * services). UUID is fixed during UserAccount creation and cannot be
     * modified using restapi.
     */
    @Basic
    private String uuid;

    /**
     * Autogenerated when a User is created
     */
    @Column(columnDefinition = "DATETIME(3)")
    @Basic
    @Temporal(TemporalType.TIMESTAMP)
    private Date registrationDate = new Date();

    @ManyToMany(cascade = {CascadeType.MERGE, CascadeType.PERSIST},
            targetEntity = UserGroup.class)
    @JsonIgnore
    private List<UserGroup> userGroups = new LinkedList<>();

    public UserAccount(String email, String password, String username,
            String uuid) {
        this.email = email;
        this.password = password;
        this.username = username;
        this.uuid = uuid;
    }

    public UserAccount() {
    }

    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getCltype() {
        return this.cltype;
    }

    public void setCltype(String cltype) {
        this.cltype = cltype;
    }

    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getUuid() {
        return this.uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public Date getRegistrationDate() {
        return this.registrationDate;
    }

    public void setRegistrationDate(Date registrationDate) {
        this.registrationDate = registrationDate;
    }

    public List<UserGroup> getUserGroups() {
        return this.userGroups;
    }

    public void setUserGroups(List<UserGroup> userGroups) {
        this.userGroups = userGroups;
    }

    public <T> T accept(Visitor<T> v) {
        return v.visit(this);
    }

}