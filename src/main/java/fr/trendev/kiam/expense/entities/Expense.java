/** * This file was generated by the JPA Modeler */
package fr.trendev.kiam.expense.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import fr.trendev.kiam.basicexpense.entities.BasicExpense;
import fr.trendev.kiam.business.entities.Business;
import fr.trendev.kiam.expenseitem.entities.ExpenseItem;
import fr.trendev.kiam.payment.entities.Payment;
import fr.trendev.kiam.professional.entities.Professional;
import fr.trendev.kiam.purchaseexpense.entities.PurchaseExpense;
import fr.trendev.kiam.utils.Visitor;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;

/**
 * @author jsie
 */
@Entity
@IdClass(ExpensePK.class)
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@SuppressWarnings("unchecked")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "cltype", visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = BasicExpense.class, name = ExpenseType.BASIC_EXPENSE),
    @JsonSubTypes.Type(value = PurchaseExpense.class, name = ExpenseType.PURCHASE_EXPENSE)})
public abstract class Expense {

    @Id
    @Column(name = "EXPENSE_ID")
    @NotNull(message = "Expense ID cannot be null")
    private String id;

    @Basic
    @NotNull(message = "cltype field in Expense must not be null")
    protected String cltype;

    @Basic
    @NotNull(message = "description field in Expense must not be null")
    private String description;

    @Basic
    private int amount;

    @Basic
    @NotNull(message = "currency field in Expense must not be null")
    private String currency = "EUR";

    @Basic
    @Column(columnDefinition = "DATETIME(3)")
    @Temporal(TemporalType.TIMESTAMP)
    @NotNull(message = "paymentDate field in Expense must not be null")
    @Past(message = "paymentDate field in Expense must not be a futur date")
    private Date paymentDate;

    @Basic
    @Column(columnDefinition = "DATETIME(3)")
    @Temporal(TemporalType.TIMESTAMP)
    @NotNull(message = "issueDate field in Expense must not be null")
    private Date issueDate = new Date();

    @Basic
    @NotNull(message = "provider field in Expense must not be null")
    private String provider;

    @Basic
    private boolean cancelled = false;

    @Basic
    @Column(columnDefinition = "DATETIME(3)")
    @Temporal(TemporalType.TIMESTAMP)
    private Date cancellationDate;

    @Basic
    private boolean vatInclusive = false;

    @ElementCollection
    private List<String> categories = new LinkedList<>();

    @Id
    @ManyToOne
    @JoinColumn(name = "EXPENSE_PRO_EMAIL", referencedColumnName = "EMAIL")
    @JsonIgnore
    private Professional professional;

    @OneToMany(orphanRemoval = true, cascade = CascadeType.ALL)
    @NotNull(message = "payments field in Expense must not be null")
    private List<Payment> payments = new LinkedList<>();

    @OneToMany
    @NotNull(message = "businesses field in Expense must not be null")
    private List<Business> businesses = new LinkedList<>();

    @OneToMany(orphanRemoval = true, cascade = CascadeType.ALL)
    private List<ExpenseItem> expenseItems = new LinkedList<>();

    public Expense() {
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getCltype() {
        return cltype;
    }

    public void setCltype(String cltype) {
        this.cltype = cltype;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public Date getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(Date paymentDate) {
        this.paymentDate = paymentDate;
    }

    public Date getIssueDate() {
        return issueDate;
    }

    public void setIssueDate(Date issueDate) {
        this.issueDate = issueDate;
    }

    public String getProvider() {
        return provider;
    }

    public void setProvider(String provider) {
        this.provider = provider;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    public void setCancelled(boolean cancelled) {
        this.cancelled = cancelled;
    }

    public Date getCancellationDate() {
        return cancellationDate;
    }

    public void setCancellationDate(Date cancellationDate) {
        this.cancellationDate = cancellationDate;
    }

    public boolean isVatInclusive() {
        return vatInclusive;
    }

    public void setVatInclusive(boolean vatInclusive) {
        this.vatInclusive = vatInclusive;
    }

    public List<String> getCategories() {
        return categories;
    }

    public void setCategories(List<String> categories) {
        this.categories = categories;
    }

    public Professional getProfessional() {
        return professional;
    }

    public void setProfessional(Professional professional) {
        this.professional = professional;
    }

    public List<Payment> getPayments() {
        return payments;
    }

    public void setPayments(List<Payment> payments) {
        this.payments = payments;
    }

    public List<Business> getBusinesses() {
        return businesses;
    }

    public void setBusinesses(List<Business> businesses) {
        this.businesses = businesses;
    }

    public List<ExpenseItem> getExpenseItems() {
        return expenseItems;
    }

    public void setExpenseItems(List<ExpenseItem> expenseItems) {
        this.expenseItems = expenseItems;
    }

    public <T> T accept(Visitor<T> v) {
        return v.visit(this);
    }

}