/** * This file was generated by the JPA Modeler */
package fr.trendev.kiam.offering.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import fr.trendev.kiam.business.entities.Business;
import fr.trendev.kiam.pack.entities.Pack;
import fr.trendev.kiam.professional.entities.Professional;
import fr.trendev.kiam.purchasedoffering.entities.PurchasedOffering;
import fr.trendev.kiam.sale.entities.Sale;
import fr.trendev.kiam.service.entities.Service;
import fr.trendev.kiam.utils.Visitor;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;

/**
 * @author jsie
 */
@Entity
@IdClass(OfferingPK.class)
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "cltype", visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = Service.class, name = OfferingType.SERVICE),
    @JsonSubTypes.Type(value = Pack.class, name = OfferingType.PACK),
    @JsonSubTypes.Type(value = Sale.class, name = OfferingType.SALE)})
public abstract class Offering {

    @Id
    @Column(name = "OFFERING_ID")
    @NotNull(message = "Offering ID cannot be null")
    private String id;

    @Basic
    @NotNull(message = "cltype field in Offering cannot be null")
    protected String cltype;

    @Basic
    private String name;

    @Basic
    private String shortname;

    @Basic
    private int price;

    @Basic
    private int duration;

    @Id
    @ManyToOne
    @JoinColumn(name = "OFFERING_PRO_EMAIL", referencedColumnName = "EMAIL", nullable = false, updatable = false)
    @JsonIgnore
    private Professional professional;

    @OneToMany
    private List<Business> businesses = new LinkedList<>();

    @OneToMany(mappedBy = "offering")
    @JsonIgnore
    private List<PurchasedOffering> purchasedOfferings = new LinkedList<>();

    @ManyToMany(mappedBy = "offerings")
    @JsonIgnore
    private List<Pack> parentPacks = new LinkedList<>();

    public Offering(String name, int price, int duration, Professional professional) {
        this.name = name;
        this.price = price;
        this.duration = duration;
        this.professional = professional;
    }

    public Offering() {
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getCltype() {
        return cltype;
    }

    public void setCltype(String cltype) {
        this.cltype = cltype;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getShortname() {
        return shortname;
    }

    public void setShortname(String shortname) {
        this.shortname = shortname;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public int getDuration() {
        return duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    public Professional getProfessional() {
        return professional;
    }

    public void setProfessional(Professional professional) {
        this.professional = professional;
    }

    public List<Business> getBusinesses() {
        return businesses;
    }

    public void setBusinesses(List<Business> businesses) {
        this.businesses = businesses;
    }

    public List<PurchasedOffering> getPurchasedOfferings() {
        return purchasedOfferings;
    }

    public void setPurchasedOfferings(List<PurchasedOffering> purchasedOfferings) {
        this.purchasedOfferings = purchasedOfferings;
    }

    public List<Pack> getParentPacks() {
        return parentPacks;
    }

    public void setParentPacks(List<Pack> parentPacks) {
        this.parentPacks = parentPacks;
    }

    public <T> T accept(Visitor<T> v) {
        return v.visit(this);
    }

    @JsonIgnore
    public Set<Offering> getAboveParentPacks() {
        Set<Offering> parents = new HashSet<>(this.parentPacks);
        this.parentPacks.forEach(p -> parents.addAll(p.getAboveParentPacks()));
        return parents;
    }

}