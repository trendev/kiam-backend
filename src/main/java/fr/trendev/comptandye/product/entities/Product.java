/** * This file was generated by the JPA Modeler */
package fr.trendev.comptandye.product.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import fr.trendev.comptandye.product.controllers.ProductEntityListener;
import fr.trendev.comptandye.productrecord.entities.ProductRecord;
import fr.trendev.comptandye.productreference.entities.ProductReference;
import fr.trendev.comptandye.professional.entities.Professional;
import fr.trendev.comptandye.sale.entities.Sale;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.Min;

/**
 * Product use is observed by ProductEntityListener. Available quantity is
 * observed after each Product update.
 *
 * @author jsie
 */
@Entity
@IdClass(ProductPK.class)
@EntityListeners({ProductEntityListener.class})
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class Product {

    @Basic
    private int availableQty;

    @Basic
    @Min(value = 0, message = "thresholdWarning in Product cannot be less than 0")
    private int thresholdWarning;

    @Basic
    @Min(value = 0, message = "thresholdSevere in Product cannot be less than 0")
    private int thresholdSevere;

    @ElementCollection
    private List<String> comments = new LinkedList<>();

    @Id
    @ManyToOne
    @JoinColumn(name = "PRODUCT_PRO_EMAIL", referencedColumnName = "EMAIL")
    @JsonIgnore
    private Professional professional;

    @Id
    @ManyToOne(cascade = CascadeType.PERSIST)
    private ProductReference productReference;

    @OneToMany(mappedBy = "product")
    @JsonIgnore
    private List<Sale> sales = new LinkedList<>();

    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<ProductRecord> productRecords = new LinkedList<>();

    public int getAvailableQty() {
        return availableQty;
    }

    public void setAvailableQty(int availableQty) {
        this.availableQty = availableQty;
    }

    public int getThresholdWarning() {
        return thresholdWarning;
    }

    public void setThresholdWarning(int thresholdWarning) {
        this.thresholdWarning = thresholdWarning;
    }

    public int getThresholdSevere() {
        return thresholdSevere;
    }

    public void setThresholdSevere(int thresholdSevere) {
        this.thresholdSevere = thresholdSevere;
    }

    public List<String> getComments() {
        return comments;
    }

    public void setComments(List<String> comments) {
        this.comments = comments;
    }

    public Professional getProfessional() {
        return professional;
    }

    public void setProfessional(Professional professional) {
        this.professional = professional;
    }

    public ProductReference getProductReference() {
        return productReference;
    }

    public void setProductReference(ProductReference productReference) {
        this.productReference = productReference;
    }

    public List<Sale> getSales() {
        return sales;
    }

    public void setSales(List<Sale> sales) {
        this.sales = sales;
    }

    public List<ProductRecord> getProductRecords() {
        return productRecords;
    }

    public void setProductRecords(List<ProductRecord> productRecords) {
        this.productRecords = productRecords;
    }

}